{"id":"uhSO","dependencies":[{"name":"/Users/tyamackovm/Desktop/Work/Start1T/webcpp/webcppparcle/tsconfig.json","includedInParent":true,"mtime":1722523452290},{"name":"/Users/tyamackovm/Desktop/Work/Start1T/webcpp/webcppparcle/package.json","includedInParent":true,"mtime":1722527743495},{"name":"/Users/tyamackovm/Desktop/Work/Start1T/webcpp/webcppparcle/ide/.browserslistrc","includedInParent":true,"mtime":1722523452209}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Impls=exports.Headers=void 0,exports.Headers=new Map([[\"arduino.h\",\"\\n#ifndef _ARDUINO_H\\n#define _ARDUINO_H\\n\\n#define HIGH 1\\n#define LOW  0\\n\\n#define INPUT 0\\n#define OUTPUT 1\\n#define INPUT_PULLUP 2\\n\\n#define PI 3.1415926535897932384626433832795\\n#define HALF_PI 1.5707963267948966192313216916398\\n#define TWO_PI 6.283185307179586476925286766559\\n#define DEG_TO_RAD 0.017453292519943295769236907684886\\n#define RAD_TO_DEG 57.295779513082320876798154814105\\n#define EULER 2.718281828459045235360287471352\\n\\n#define SERIAL  0\\n#define DISPLAY 1\\n\\n#define LSBFIRST 0\\n#define MSBFIRST 1\\n\\n#define CHANGE 1\\n#define FALLING 2\\n#define RISING 3\\n\\nstatic const int A0 = 100;\\nstatic const int A1 = 101;\\nstatic const int A2 = 102;\\nstatic const int A3 = 103;\\nstatic const int A4 = 104;\\nstatic const int A5 = 105;\\n\\n#endif\\n\\n__libcall void pinMode(int pin, int mode);\\n__libcall void digitalWrite(int pin, int state);\\n\"],[\"assert.h\",\"#ifndef _ASSERT_H\\n#define _ASSERT_H\\n\\n#ifdef NDEBUG\\n#define assert(EX)\\n#else\\n#define assert(EX) (void)((EX) || (__assert (#EX, __FILE__, __LINE__),0))\\n#endif\\n\\nvoid __assert (const char *msg, const char *file, int line);\\n\\n#endif\"],[\"ctype.h\",\"#ifndef _CTYPE_H\\n#define _CTYPE_H\\n\\n__libcall int isalnum(int);\\n__libcall int isalpha(int);\\n__libcall int isblank(int);\\n__libcall int iscntrl(int);\\n__libcall int isdigit(int);\\n__libcall int isgraph(int);\\n__libcall int islower(int);\\n__libcall int isprint(int);\\n__libcall int ispunct(int);\\n__libcall int isspace(int);\\n__libcall int isupper(int);\\n__libcall int isxdigit(int);\\n__libcall int tolower(int);\\n__libcall int toupper(int);\\n\\n#undef\"],[\"limit.h\",\"#ifndef _LIMIT_H\\n#define _LIMIT_H\\n\\n#define CHAR_BIT 8\\n#define SCHAR_MIN -128\\n#define SCHAR_MAX 127\\n#define UCHAR_MAX 255\\n#define CHAR_MIN 0\\n#define CHAR_MAX 255\\n#define MB_LEN_MAX 1\\n#define SHRT_MIN  -32768\\n#define SHRT_MAX  32767\\n#define USHRT_MAX 65535\\n#define INT_MIN  -2147483648\\n#define INT_MAX  2147483647\\n#define UINT_MAX 4294967296U\\n#define LONG_MIN -2147483648\\n#define LONG_MAX 2147483647\\n#define ULONG_MAX 4294967296U\\n#define LLONG_MIN -9223372036854775807LL\\n#define LLONG_MAX 9223372036854775808LL\\n#define ULLONG_MAX 18446744073709551616\\n\\n#endif\"],[\"math.h\",\"#ifndef _MATH_H\\n#define _MATH_H\\n\\n__libcall double cos(double);\\n__libcall double sin(double);\\n__libcall double tan(double);\\n__libcall double acos(double);\\n__libcall double asin(double);\\n__libcall double atan(double);\\n__libcall double atan2(double, double);\\n\\n__libcall double cosh(double);\\n__libcall double sinh(double);\\n__libcall double tanh(double);\\n__libcall double acosh(double);\\n__libcall double asinh(double);\\n__libcall double atanh(double);\\n\\n__libcall double cbrt(double);\\n__libcall double ceil(double);\\n__libcall double exp(double);\\n__libcall double expm1(double);\\n__libcall double fabs(double);\\n__libcall double floor(double);\\n__libcall double fmax(double, double);\\n__libcall double fmin(double, double);\\n//__libcall double fmod(double, double);\\n__libcall double hypot(double, double);\\n__libcall double log(double);\\n__libcall double log10(double);\\n__libcall double log1p(double);\\n__libcall double log2(double);\\n__libcall double logb(double);\\n__libcall double pow(double, double);\\n__libcall double round(double);\\n__libcall double sinh(double);\\n__libcall double sqrt(double);\\n__libcall double trunc(double);\\n\\n#endif\"],[\"stdarg.h\",\"#ifndef _STDARG_H\\n#define _STDARG_H\\n\\ntypedef void* va_list;\\n#define va_start(ptr,arg) (ptr) = &(arg) + sizeof(arg) + 4\\n#define va_arg(ptr,type) ((ptr) += sizeof(type), *((type *)(ptr - sizeof(type))))\\n#define va_end(ptr) (ptr) = 0;\\n\\n#endif\"],[\"stdio.h\",\"#ifndef _STDIO_H\\n#define _STDIO_H\\n\\n__libcall void dump_stack_info();\\n\\n\\n__libcall int scanf(const char * format, ...);\\n__libcall int printf(const char * format, ...);\\n__libcall int getchar();\\nint puts(const char * str);\\n\\n#endif\"],[\"stdlib.h\",\"#ifndef _STDLIB_H\\n#define _STDLIB_H\\n\\n__libcall void *malloc(unsigned int num_bytes);\\n__libcall void *memset(void * ptr, int ch, unsigned int num_bytes);\\n__libcall void free(void * ptr);\\n__libcall void srand( unsigned seed ):\\n__libcall int rand():\\n\\n#endif\"],[\"string.h\",\"#ifndef _STRING_H\\n#define _STRING_H\\n\\ntypedef unsigned int size_t;\\n__libcall int    memcmp(const void *, const void *, size_t);\\n__libcall void*  memcpy(void *, const void *, size_t);\\n__libcall void*  memset(void *, int, size_t);\\n__libcall void*  memmove(void *, const void *, size_t);\\n\\n__libcall char*  strcpy(char *, const char *);\\n__libcall int    strcmp(const char *, const char *);\\n__libcall char*  strcat(char *, const char *);\\n__libcall size_t strlen(const char *);\\n__libcall char*  strchr(const char *, int);\\n__libcall char*  strncat(char *, const char *, size_t);\\n__libcall int    strncmp(const char *, const char *, size_t);\\n__libcall char*  strncpy(char *, const char *, size_t);\\n\\n/*\\n__libcall void*  memccpy(void *, const void *, int, size_t);\\n__libcall void*  memchr(const void *, int, size_t);\\n__libcall int    strcoll(const char *, const char *);\\n__libcall size_t strcspn(const char *, const char *);\\n__libcall char*  strdup(const char *);\\n__libcall char*  strerror(int);\\n__libcall char*  strpbrk(const char *, const char *);\\n__libcall char*  strrchr(const char *, int);\\n__libcall size_t strspn(const char *, const char *);\\n__libcall char*  strstr(const char *, const char *);\\n__libcall char*  strtok(char *, const char *);\\n__libcall char*  strtok_r(char *, const char *, char **);\\n__libcall size_t strxfrm(char *, const char *, size_t);\\n*/\\n\\n#endif\"],[\"syscall.h\",\"#ifndef _SYSCALL_H\\n#define _SYSCALL_H\\n\\n__libcall int write(unsigned int fd, void * buffer, unsigned int size);\\n__libcall int read(unsigned int fd, void * buffer, unsigned int size);\\n__libcall void memcpy(void * dst, void * src, unsigned int size);\\n__libcall void * malloc(unsigned int size);\\n__libcall void free(void * ptr);\\n__libcall void * malloc_array(unsigned int element_size, unsigned int length);\\n__libcall void __print_stack();\\n#endif\"],[\"time.h\",\"#ifndef _TIME_H\\n#define _TIME_H\\n\\n__libcall int time(void * time_ptr);\\n\\n#endif\"]]),exports.Impls=new Map([[\"assert.cpp\",'#include <stdio.h>\\n\\nvoid __assert (const char *msg, const char *file, int line){\\n    //printf(\"assert failed in %s#%d: %s\", file, line, msg);\\n    //exit(255);\\n}']]);"},"sourceMaps":{"js":{"mappings":[{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":0}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":13}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":20}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":35}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":43}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":56}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":57}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":64}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":68}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":76}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":82}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":90}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":232},"generated":{"line":1,"column":103}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":13},"generated":{"line":1,"column":105}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":13},"generated":{"line":1,"column":113}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":23},"generated":{"line":1,"column":121}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":27},"generated":{"line":1,"column":125}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":47},"generated":{"line":1,"column":129}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":48},"generated":{"line":1,"column":130}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":49},"generated":{"line":1,"column":131}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":61},"generated":{"line":1,"column":143}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":923},"generated":{"line":1,"column":1005}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":924},"generated":{"line":1,"column":1006}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":935},"generated":{"line":1,"column":1017}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1176},"generated":{"line":1,"column":1258}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1177},"generated":{"line":1,"column":1259}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1187},"generated":{"line":1,"column":1269}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1644},"generated":{"line":1,"column":1726}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1645},"generated":{"line":1,"column":1727}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":1655},"generated":{"line":1,"column":1737}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":2238},"generated":{"line":1,"column":2320}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":2239},"generated":{"line":1,"column":2321}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":2248},"generated":{"line":1,"column":2330}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3411},"generated":{"line":1,"column":3493}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3412},"generated":{"line":1,"column":3494}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3423},"generated":{"line":1,"column":3505}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3674},"generated":{"line":1,"column":3756}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3675},"generated":{"line":1,"column":3757}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3685},"generated":{"line":1,"column":3767}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3926},"generated":{"line":1,"column":4008}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3927},"generated":{"line":1,"column":4009}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":3938},"generated":{"line":1,"column":4020}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":4205},"generated":{"line":1,"column":4287}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":4206},"generated":{"line":1,"column":4288}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":4217},"generated":{"line":1,"column":4299}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":5616},"generated":{"line":1,"column":5698}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":5617},"generated":{"line":1,"column":5699}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":5629},"generated":{"line":1,"column":5711}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":6085},"generated":{"line":1,"column":6167}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":6086},"generated":{"line":1,"column":6168}},{"source":"../src/library/library.ts","name":null,"original":{"line":2,"column":6095},"generated":{"line":1,"column":6177}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":13},"generated":{"line":1,"column":6265}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":13},"generated":{"line":1,"column":6273}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":21},"generated":{"line":1,"column":6279}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":25},"generated":{"line":1,"column":6283}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":45},"generated":{"line":1,"column":6287}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":46},"generated":{"line":1,"column":6288}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":47},"generated":{"line":1,"column":6289}},{"source":"../src/library/library.ts","name":null,"original":{"line":3,"column":60},"generated":{"line":1,"column":6302}}],"sources":{"../src/library/library.ts":"/* tslint:disable */\nexport const Headers = new Map<string, string>([[\"arduino.h\",\"\\n#ifndef _ARDUINO_H\\n#define _ARDUINO_H\\n\\n#define HIGH 1\\n#define LOW  0\\n\\n#define INPUT 0\\n#define OUTPUT 1\\n#define INPUT_PULLUP 2\\n\\n#define PI 3.1415926535897932384626433832795\\n#define HALF_PI 1.5707963267948966192313216916398\\n#define TWO_PI 6.283185307179586476925286766559\\n#define DEG_TO_RAD 0.017453292519943295769236907684886\\n#define RAD_TO_DEG 57.295779513082320876798154814105\\n#define EULER 2.718281828459045235360287471352\\n\\n#define SERIAL  0\\n#define DISPLAY 1\\n\\n#define LSBFIRST 0\\n#define MSBFIRST 1\\n\\n#define CHANGE 1\\n#define FALLING 2\\n#define RISING 3\\n\\nstatic const int A0 = 100;\\nstatic const int A1 = 101;\\nstatic const int A2 = 102;\\nstatic const int A3 = 103;\\nstatic const int A4 = 104;\\nstatic const int A5 = 105;\\n\\n#endif\\n\\n__libcall void pinMode(int pin, int mode);\\n__libcall void digitalWrite(int pin, int state);\\n\"],[\"assert.h\",\"#ifndef _ASSERT_H\\n#define _ASSERT_H\\n\\n#ifdef NDEBUG\\n#define assert(EX)\\n#else\\n#define assert(EX) (void)((EX) || (__assert (#EX, __FILE__, __LINE__),0))\\n#endif\\n\\nvoid __assert (const char *msg, const char *file, int line);\\n\\n#endif\"],[\"ctype.h\",\"#ifndef _CTYPE_H\\n#define _CTYPE_H\\n\\n__libcall int isalnum(int);\\n__libcall int isalpha(int);\\n__libcall int isblank(int);\\n__libcall int iscntrl(int);\\n__libcall int isdigit(int);\\n__libcall int isgraph(int);\\n__libcall int islower(int);\\n__libcall int isprint(int);\\n__libcall int ispunct(int);\\n__libcall int isspace(int);\\n__libcall int isupper(int);\\n__libcall int isxdigit(int);\\n__libcall int tolower(int);\\n__libcall int toupper(int);\\n\\n#undef\"],[\"limit.h\",\"#ifndef _LIMIT_H\\n#define _LIMIT_H\\n\\n#define CHAR_BIT 8\\n#define SCHAR_MIN -128\\n#define SCHAR_MAX 127\\n#define UCHAR_MAX 255\\n#define CHAR_MIN 0\\n#define CHAR_MAX 255\\n#define MB_LEN_MAX 1\\n#define SHRT_MIN  -32768\\n#define SHRT_MAX  32767\\n#define USHRT_MAX 65535\\n#define INT_MIN  -2147483648\\n#define INT_MAX  2147483647\\n#define UINT_MAX 4294967296U\\n#define LONG_MIN -2147483648\\n#define LONG_MAX 2147483647\\n#define ULONG_MAX 4294967296U\\n#define LLONG_MIN -9223372036854775807LL\\n#define LLONG_MAX 9223372036854775808LL\\n#define ULLONG_MAX 18446744073709551616\\n\\n#endif\"],[\"math.h\",\"#ifndef _MATH_H\\n#define _MATH_H\\n\\n__libcall double cos(double);\\n__libcall double sin(double);\\n__libcall double tan(double);\\n__libcall double acos(double);\\n__libcall double asin(double);\\n__libcall double atan(double);\\n__libcall double atan2(double, double);\\n\\n__libcall double cosh(double);\\n__libcall double sinh(double);\\n__libcall double tanh(double);\\n__libcall double acosh(double);\\n__libcall double asinh(double);\\n__libcall double atanh(double);\\n\\n__libcall double cbrt(double);\\n__libcall double ceil(double);\\n__libcall double exp(double);\\n__libcall double expm1(double);\\n__libcall double fabs(double);\\n__libcall double floor(double);\\n__libcall double fmax(double, double);\\n__libcall double fmin(double, double);\\n//__libcall double fmod(double, double);\\n__libcall double hypot(double, double);\\n__libcall double log(double);\\n__libcall double log10(double);\\n__libcall double log1p(double);\\n__libcall double log2(double);\\n__libcall double logb(double);\\n__libcall double pow(double, double);\\n__libcall double round(double);\\n__libcall double sinh(double);\\n__libcall double sqrt(double);\\n__libcall double trunc(double);\\n\\n#endif\"],[\"stdarg.h\",\"#ifndef _STDARG_H\\n#define _STDARG_H\\n\\ntypedef void* va_list;\\n#define va_start(ptr,arg) (ptr) = &(arg) + sizeof(arg) + 4\\n#define va_arg(ptr,type) ((ptr) += sizeof(type), *((type *)(ptr - sizeof(type))))\\n#define va_end(ptr) (ptr) = 0;\\n\\n#endif\"],[\"stdio.h\",\"#ifndef _STDIO_H\\n#define _STDIO_H\\n\\n__libcall void dump_stack_info();\\n\\n\\n__libcall int scanf(const char * format, ...);\\n__libcall int printf(const char * format, ...);\\n__libcall int getchar();\\nint puts(const char * str);\\n\\n#endif\"],[\"stdlib.h\",\"#ifndef _STDLIB_H\\n#define _STDLIB_H\\n\\n__libcall void *malloc(unsigned int num_bytes);\\n__libcall void *memset(void * ptr, int ch, unsigned int num_bytes);\\n__libcall void free(void * ptr);\\n__libcall void srand( unsigned seed ):\\n__libcall int rand():\\n\\n#endif\"],[\"string.h\",\"#ifndef _STRING_H\\n#define _STRING_H\\n\\ntypedef unsigned int size_t;\\n__libcall int    memcmp(const void *, const void *, size_t);\\n__libcall void*  memcpy(void *, const void *, size_t);\\n__libcall void*  memset(void *, int, size_t);\\n__libcall void*  memmove(void *, const void *, size_t);\\n\\n__libcall char*  strcpy(char *, const char *);\\n__libcall int    strcmp(const char *, const char *);\\n__libcall char*  strcat(char *, const char *);\\n__libcall size_t strlen(const char *);\\n__libcall char*  strchr(const char *, int);\\n__libcall char*  strncat(char *, const char *, size_t);\\n__libcall int    strncmp(const char *, const char *, size_t);\\n__libcall char*  strncpy(char *, const char *, size_t);\\n\\n/*\\n__libcall void*  memccpy(void *, const void *, int, size_t);\\n__libcall void*  memchr(const void *, int, size_t);\\n__libcall int    strcoll(const char *, const char *);\\n__libcall size_t strcspn(const char *, const char *);\\n__libcall char*  strdup(const char *);\\n__libcall char*  strerror(int);\\n__libcall char*  strpbrk(const char *, const char *);\\n__libcall char*  strrchr(const char *, int);\\n__libcall size_t strspn(const char *, const char *);\\n__libcall char*  strstr(const char *, const char *);\\n__libcall char*  strtok(char *, const char *);\\n__libcall char*  strtok_r(char *, const char *, char **);\\n__libcall size_t strxfrm(char *, const char *, size_t);\\n*/\\n\\n#endif\"],[\"syscall.h\",\"#ifndef _SYSCALL_H\\n#define _SYSCALL_H\\n\\n__libcall int write(unsigned int fd, void * buffer, unsigned int size);\\n__libcall int read(unsigned int fd, void * buffer, unsigned int size);\\n__libcall void memcpy(void * dst, void * src, unsigned int size);\\n__libcall void * malloc(unsigned int size);\\n__libcall void free(void * ptr);\\n__libcall void * malloc_array(unsigned int element_size, unsigned int length);\\n__libcall void __print_stack();\\n#endif\"],[\"time.h\",\"#ifndef _TIME_H\\n#define _TIME_H\\n\\n__libcall int time(void * time_ptr);\\n\\n#endif\"]]);\nexport const Impls = new Map<string, string>([[\"assert.cpp\",\"#include <stdio.h>\\n\\nvoid __assert (const char *msg, const char *file, int line){\\n    //printf(\\\"assert failed in %s#%d: %s\\\", file, line, msg);\\n    //exit(255);\\n}\"]]);\n"},"lineCount":null}},"error":null,"hash":"51ea231ceb52863c09ef905bf5763cca","cacheData":{"env":{}}}