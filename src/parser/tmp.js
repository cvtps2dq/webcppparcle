const fs = require('fs');
let file = fs.readFileSync('c.lang.js', 'utf-8');

const data =
    `const Position = CTree.Position;
    const SourceLocation = CTree.SourceLocation;
    const Node = CTree.Node;
    const MultiLineComment = CTree.MultiLineComment;
    const SingleLineComment = CTree.SingleLineComment;
    const PpChar = CTree.PpChar;
    const Expression = CTree.Expression;
    const Identifier = CTree.Identifier;
    const Constant = CTree.Constant;
    const IntegerConstant = CTree.IntegerConstant;
    const FloatingConstant = CTree.FloatingConstant;
    const CharacterConstant = CTree.CharacterConstant;
    const StringLiteral = CTree.StringLiteral;
    const Punctuator = CTree.Punctuator;
    const HeaderName = CTree.HeaderName;
    const PpNumber = CTree.PpNumber;
    const ParenthesisExpression = CTree.ParenthesisExpression;
    const GenericAssociation = CTree.GenericAssociation;
    const GenericSelection = CTree.GenericSelection;
    const CompoundLiteral = CTree.CompoundLiteral;
    const SubscriptExpression = CTree.SubscriptExpression;
    const CallExpression = CTree.CallExpression;
    const MemberExpression = CTree.MemberExpression;
    const PostfixExpression = CTree.PostfixExpression;
    const UnaryExpression = CTree.UnaryExpression;
    const CastExpression = CTree.CastExpression;
    const BinaryExpression = CTree.BinaryExpression;
    const ConditionalExpression = CTree.ConditionalExpression;
    const AssignmentExpression = CTree.AssignmentExpression;
    const Declaration = CTree.Declaration;
    const AtomicTypeSpecifier = CTree.AtomicTypeSpecifier;
    const StructOrUnionSpecifier = CTree.StructOrUnionSpecifier;
    const StructDeclaration = CTree.StructDeclaration;
    const StructDeclarator = CTree.StructDeclarator;
    const EnumSpecifier = CTree.EnumSpecifier;
    const Enumerator = CTree.Enumerator;
    const TypedefName = CTree.TypedefName;
    const AlignmentSpecifier = CTree.AlignmentSpecifier;
    const InitDeclarator = CTree.InitDeclarator;
    const StaticAssertDeclaration = CTree.StaticAssertDeclaration;
    const Declarator = CTree.Declarator;
    const PointerDeclarator = CTree.PointerDeclarator;
    const Pointer = CTree.Pointer;
    const IdentifierDeclarator = CTree.IdentifierDeclarator;
    const ArrayDeclarator = CTree.ArrayDeclarator;
    const FunctionDeclarator = CTree.FunctionDeclarator;
    const ParameterList = CTree.ParameterList;
    const ParameterDeclaration = CTree.ParameterDeclaration;
    const TypeName = CTree.TypeName;
    const AbstractDeclarator = CTree.AbstractDeclarator;
    const AbstractPointerDeclarator = CTree.AbstractPointerDeclarator;
    const AbstractArrayDeclarator = CTree.AbstractArrayDeclarator;
    const AbstractFunctionDeclarator = CTree.AbstractFunctionDeclarator;
    const InitializerListItem = CTree.InitializerListItem;
    const InitializerList = CTree.InitializerList;
    const Designator = CTree.Designator;
    const SubscriptDesignator = CTree.SubscriptDesignator;
    const MemberDesignator = CTree.MemberDesignator;
    const Statement = CTree.Statement;
    const CaseStatement = CTree.CaseStatement;
    const LabeledStatement = CTree.LabeledStatement;
    const CompoundStatement = CTree.CompoundStatement;
    const ExpressionStatement = CTree.ExpressionStatement;
    const NullStatement = CTree.NullStatement;
    const IfStatement = CTree.IfStatement;
    const SwitchStatement = CTree.SwitchStatement;
    const WhileStatement = CTree.WhileStatement;
    const DoWhileStatement = CTree.DoWhileStatement;
    const ForStatement = CTree.ForStatement;
    const GotoStatement = CTree.GotoStatement;
    const ContinueStatement = CTree.ContinueStatement;
    const BreakStatement = CTree.BreakStatement;
    const ReturnStatement = CTree.ReturnStatement;
    const TranslationUnit = CTree.TranslationUnit;
    const FunctionDefinition = CTree.FunctionDefinition;
    const PreprocessingFile = CTree.PreprocessingFile
    const Directive = CTree.Directive
    const IfSection = CTree.IfSection
    const IfGroup = CTree.IfGroup
    const IfdefGroup = CTree.IfdefGroup
    const IfndefGroup = CTree.IfndefGroup
    const ElifGroup = CTree.ElifGroup
    const ElseGroup = CTree.ElseGroup
    const IncludeDirective = CTree.IncludeDirective
    const ObjectLikeDefineDirective = CTree.ObjectLikeDefineDirective
    const FunctionLikeDefineDirective = CTree.FunctionLikeDefineDirective
    const UndefDirective = CTree.UndefDirective
    const LineDirective = CTree.LineDirective
    const ErrorDirective = CTree.ErrorDirective
    const PragmaDirective = CTree.PragmaDirective
    const NullDirective = CTree.NullDirective
    const TextBlock = CTree.TextBlock
    const NonDirective = CTree.NonDirective`;

a = data.split('\n').map( x=> x.match(/(?<=const ).*(?= =)/)[0]);
for(let b of a){
    file = file.replace(eval(`/(?<=new )${b}/g`), 'AST.' + b);
}
console.log(file);

