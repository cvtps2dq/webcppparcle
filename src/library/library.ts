/* tslint:disable */
export const Headers = new Map<string, string>([["assert.h","#ifndef _ASSERT_H\n#define _ASSERT_H\n\n#ifdef NDEBUG\n#define assert(EX)\n#else\n#define assert(EX) (void)((EX) || (__assert (#EX, __FILE__, __LINE__),0))\n#endif\n\nvoid __assert (const char *msg, const char *file, int line);\n\n#endif"],["stdarg.h","#ifndef _STDARG_H\n#define _STDARG_H\n\ntypedef void* va_list;\n#define va_start(ptr,arg) (ptr) = &(arg) + sizeof(arg) + 4\n#define va_arg(ptr,type) ((ptr) += sizeof(type), *((type *)(ptr - sizeof(type))))\n#define va_end(ptr) (ptr) = 0;\n\n#endif"],["stdlib.h","#ifndef _STDLIB_H\n#define _STDLIB_H\n\n__libcall void *malloc(unsigned int num_bytes);\n__libcall void free(void * ptr);\n\n#endif"],["string.h","#ifndef _STRING_H\n#define _STRING_H\n\nunsigned int strlen(const char * str);\n\n#endif"],["syscall.h","#ifndef _SYSCALL_H\n#define _SYSCALL_H\n\n__libcall int write(unsigned int fd, void * buffer, unsigned int size);\n__libcall int read(unsigned int fd, void * buffer, unsigned int size);\n__libcall void memcpy(void * dst, void * src, unsigned int size);\n__libcall void * malloc(unsigned int size);\n__libcall void free(void * ptr);\n__libcall void * malloc_array(unsigned int element_size, unsigned int length);\n#endif"],["stdio.h","#ifndef _STDIO_H\n#define _STDIO_H\n\n__libcall void dump_stack_info();\n\n\n__libcall int scanf(const char * format, ...);\n__libcall int printf(const char * format, ...);\n__libcall int getchar();\nint puts(const char * str);\n\n#endif"],["time.h","#ifndef _TIME_H\n#define _TIME_H\n\n__libcall int time(void * time_ptr);\n\n#endif"]]);
export const Impls = new Map<string, string>([["assert.cpp","#include <stdio.h>\n\nvoid __assert (const char *msg, const char *file, int line){\n    //printf(\"assert failed in %s#%d: %s\", file, line, msg);\n    //exit(255);\n}"],["string.cpp","#include <string.h>\n\nunsigned int strlen(const char * str){\n    unsigned int cnt = 0;\n    while( *str != 0 ){\n        str = str + 1;\n        cnt = cnt + 1;\n    }\n    return cnt;\n}"],["stdio.cpp","#include <stdio.h>\n#include <stdarg.h>\n#include <syscall.h>\n#include <string.h>\n\nint puts(const char * str){\n    int len = strlen(str);\n    write(1, str, len);\n    return len;\n}\n"]]);
